require "fileutils"
require "tempfile"

fastlane_version "2.63.0"

skip_docs

TEST_OUTPUT = "fastlane/test_output"
DERIVED_DATA_PATH = "#{TEST_OUTPUT}/derived_data"

desc "Run the tests"
lane :test do
  UI.message "Cleaning derived data directory"
  sh "rm -rf ../#{DERIVED_DATA_PATH}"

  UI.message "Testing"
  scan(scheme: "JOSESwift", derived_data_path: DERIVED_DATA_PATH, clean: true, output_directory: "#{TEST_OUTPUT}/xctest/")
end

desc "Lint Swift files"
lane :lint do |options|
  strict = options.fetch(:strict, false)
  sh "mkdir -p ../#{TEST_OUTPUT}/swiftlint/"
  swiftlint(strict: strict, reporter: "junit", output_file: "#{TEST_OUTPUT}/swiftlint/results.junit")
end

desc "Format Swift files"
lane :format_code do
  swiftlint(mode: :autocorrect)
end

desc "Bumps the version number"
lane :bump do |options|
  bump_type = options[:type]
  version = options[:version]

  new_version_xcode = ""
  new_version_podspec = ""

  case bump_type
  when "major", "minor", "patch"
    new_version_xcode = increment_version_number(bump_type: bump_type)
    new_version_podspec = version_bump_podspec(path: "JOSESwift.podspec", bump_type: bump_type)
  else
    if version.nil?
      new_version_xcode = increment_version_number
      new_version_podspec = version_bump_podspec(path: "JOSESwift.podspec")
    else
      new_version_xcode = increment_version_number(version_number: version)
      new_version_podspec = version_bump_podspec(path: "JOSESwift.podspec", version_number: version)
    end
  end

  if new_version_xcode == new_version_podspec
    UI.success "Bumped version number to #{new_version_xcode}"
  else
    UI.user_error!("Xcode and .podspec version mismatch: #{new_version_xcode} != #{new_version_podspec}")
  end

  new_version_xcode
end

desc "Get all pull requests since the last release"
lane :pr_commits do
  # Only include squashed pull requests which end with something like "(#123)".
  changelog_from_git_commits(pretty:"- %s")
    .split("\n")
    .grep(/\(#[0-9]*\)$/)
    .join("\n")
end

lane :update_changelog do
  ensure_git_status_clean

  changelog_path = "../CHANGELOG.md"
  changelog_additions = "## [#{get_version_number}] - #{Time.now.strftime("%Y-%m-%d")}\n\n#{pr_commits}"
  changelog = File.read(changelog_path)
  changelog = changelog.sub(/##/, "#{changelog_additions}\n\n\\0")
  File.write(changelog_path, changelog)

  sh("git commit -am 'Update changelog'")
  ensure_git_status_clean
end

desc "Prepares a release by bumping version, formatting code, running tests, setting up a release preparation branch"
lane :prepare do |options|
  unless options[:force]
    # Ensure we prepare from current master
    ensure_git_branch(branch: "master") 
  end

  ensure_git_status_clean

  # Bump version
  version = bump(options)

  # Commit version bump on release preparation branch (release/x-x-x)
  branch_name = "release/#{version.gsub(/\./, '-')}"
  sh("git", "checkout", "-b", branch_name)
  commit_version_bump(message: "Bump version to #{version}", include: ["JOSESwift.podspec"])
  ensure_git_status_clean

  # Format code
  format_code
  sh("git diff-index --quiet HEAD || git commit -am 'Automatically format code'")
  ensure_git_status_clean

  # Update copyright year if needed
  copyright

  test

  update_changelog

  # Prompt for confimation
  promt_text = "Version #{version} has been prepared for release. "\
               "Please make any additional changes that should be included in the release before continuing. "\
               "Would you like to continue and push #{branch_name}?"

  unless prompt(text: promt_text, boolean: true, ci_input: "y")
    UI.user_error!("Exiting early. Release branch not pushed")
  end

  # Commit changes and push release branch
  sh("git diff-index --quiet HEAD || git commit -am 'Prepare #{version} for release'")
  sh("git push --set-upstream origin #{branch_name}")

  release_pr
end

desc "Create a release pull request to master"
lane :release_pr do
  unless system("which gh > /dev/null 2>&1")
  	UI.message "Cannot create release pull request since 'gh' is not installed"
    next
  end

  pr_body = "This pull request was autogenerated by fastlane. :robot: :rocket:" \

  version = get_version_number(target: "JOSESwift")

  gh_command = "gh pr create"\
               " --title 'Prepare #{version}'"\
               " --body '#{pr_body}'"\
               " --reviewer 'airsidemobile/ios'"

  system(gh_command)
end

desc "Create a release by tagging and pushing to CocoaPods trunk"
lane :release do
  # Ensure we release from master
  ensure_git_branch(branch: "master")
  ensure_git_status_clean

  # Prompt for confirmation
  version = get_version_number(target: "JOSESwift")
  unless prompt(text: "You are about to release #{version}. Continue?", boolean: true, ci_input: "y")
    UI.user_error!("Exiting early. Version #{version} not released")
  end

  # Tag release
  add_git_tag(tag: version)
  push_git_tags

  # Puplish pod
  pod_push(path: "JOSESwift.podspec")

  # Publish release
  publish_release

  ensure_git_status_clean
end

desc "Publishes the release on GitHub"
lane :publish_release do
  version = get_version_number(target: "JOSESwift")

  changelog = File.read("../CHANGELOG.md")
  changes = changelog[/(- .+\(#.+\)\n)+/] # Filter latest change set (e.g. "- Add some feature (#123)\n...").
  tmp_changelog = Tempfile.new("jose-changelog")
  tmp_changelog.write(changes)
  tmp_changelog.close

  system("gh release create #{version} --title v#{version} --notes-file #{tmp_changelog.path}")

  tmp_changelog.unlink
end

desc "Run Sonarqube analysis after running the test lane"
lane :sonarqube do |options|
  unless ENV['FL_SONAR_LOGIN']
    UI.important "Skipping Sonarqube analysis because login is not specified"
    next
  end

  # Convert Xcode coverage report to Sonarqube generic format
  sq_coverage_report = "#{TEST_OUTPUT}/sonarqube-coverage.xml"
  Dir.chdir("..") do
    cov_reports = Dir["#{DERIVED_DATA_PATH}/Logs/Test/**/*.xcresult"].join(" ")
    sh "scripts/xccov-to-sonarqube.sh #{cov_reports} > #{sq_coverage_report}"
  end

  # Run Sonarqube analysis
  runner_args = "-Dsonar.coverageReportPaths=#{sq_coverage_report}"
  sonar(
    project_version: get_version_number,
    sonar_runner_args: runner_args
  )
end

desc "Updates the copyright year of license headers in source files if needed"
lane :copyright do |options|
  ensure_git_status_clean

  sh("../scripts/update-license-year.sh")
  sh("git diff-index --quiet HEAD || git commit -am 'Update license header year - happy new year'")
  
  ensure_git_status_clean
end
