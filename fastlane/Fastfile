fastlane_version "2.63.0"

skip_docs

desc "Run the tests"
lane :test do
  scan(scheme: "JOSESwift")
end

desc "Lint Swift files"
lane :lint do
  # Todo: Don't ignore exit status (#98)
  swiftlint(ignore_exit_status: true)
end

desc "Format Swift files"
lane :format_code do
  swiftlint(mode: :autocorrect)
end

desc "Bumps the version number"
lane :bump do |options|
  bump_type = options[:type]
  version = options[:version]

  new_version_xcode = ""
  new_version_podspec = ""

  case bump_type
  when "major", "minor", "patch"
    new_version_xcode = increment_version_number(bump_type: bump_type)
    new_version_podspec = version_bump_podspec(path: "JOSESwift.podspec", bump_type: bump_type)
  else
    if version.nil?
      new_version_xcode = increment_version_number
      new_version_podspec = version_bump_podspec(path: "JOSESwift.podspec")
    else
      new_version_xcode = increment_version_number(version_number: version)
      new_version_podspec = version_bump_podspec(path: "JOSESwift.podspec", version_number: version)
    end
  end

  if new_version_xcode == new_version_podspec
    UI.success "Did bump version number to #{new_version_xcode}"
  else
    UI.user_error!("Xcode and .podspec version mismatch: #{new_version_xcode} != #{new_version_podspec}")
  end

  new_version_xcode
end

desc "Prepares a release"
lane :prepare do |options|
  bump_type = options[:type]
  version = ""
  branch_name = ""

  # Ensure we release from master

  ensure_git_branch(branch: "master")
  ensure_git_status_clean

  # Bump version

  case bump_type
  when "major", "minor", "patch"
    version = bump(type: bump_type)
  else
    UI.user_error!("No bump type specified!")
  end

  # Commit version bump on branch release/x-x-x

  branch_name = "release/#{version.gsub(/\./, '-')}"
  sh("git", "checkout", "-b", branch_name)
  commit_version_bump(message: "Bump version to #{version}", include: ["JOSESwift.podspec"])
  ensure_git_status_clean

  # Format code

  format_code
  git_commit(path: "./**/*.swift", message: "Automatically format Swift code")
  ensure_git_status_clean

  # Run tests

  test

  # Promt for confimation

  promt_text = "#{version} has been prepared for release. "\
               "Please make any additional changes before continuing. "\
               "Would you like to continue and push #{branch_name}?"

  if prompt(text: promt_text.green, boolean: true, ci_input:"y")
    sh("git diff-index --quiet HEAD || git commit -m 'Prepare #{version} for release'")
    sh("git push --set-upstream origin #{branch_name}")
  end
end
